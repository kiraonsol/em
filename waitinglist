<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EVIL MODEL | Join the Waitlist</title>
    <style>
        :root {
            --primary: #FF6F61;
            --primary-dark: #E25747;
            --background: #F5F5F5;
            --text: #000000;
            --text-secondary: rgba(0, 0, 0, 0.7);
            --overlay: rgba(245, 245, 245, 0.9);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        html {
            scroll-behavior: smooth;
            background-color: var(--background);
        }

        body {
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }

        #webgl-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            z-index: 1;
            opacity: 0.3;
        }

        .content {
            position: relative;
            z-index: 2;
            perspective: 1000px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .hero-section {
            flex: 1;
            display: flex;
            align-items: center;
            padding: 2rem;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 4rem;
            align-items: center;
        }

        .hero-content {
            max-width: 600px;
        }

        .title-sequence {
            font-size: clamp(3rem, 8vw, 5rem);
            line-height: 1;
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;
        }

        .subtitle {
            font-size: clamp(1.1rem, 2vw, 1.3rem);
            color: var(--text-secondary);
            margin-bottom: 2.5rem;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) 0.2s forwards;
        }

        .waitlist-form {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) 0.4s forwards;
        }

        .form-group {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .input-field {
            flex: 1;
            padding: 1rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(255, 111, 97, 0.1);
        }

        .submit-btn {
            padding: 1rem 2rem;
            background: var(--text);
            color: var(--background);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            background: #1a1a1a;
        }

        .video-container {
            position: relative;
            width: 100%;
            aspect-ratio: 1920/1040;
            border-radius: 12px;
            overflow: hidden;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeUp 0.8s cubic-bezier(0.16, 1, 0.3, 1) 0.6s forwards;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15),
                        0 10px 20px rgba(0, 0, 0, 0.1);
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease-out;
        }

        .video-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2),
                        0 15px 25px rgba(0, 0, 0, 0.15);
        }

        .video-container iframe {
            width: 100%;
            height: 100%;
            border: none;
            position: absolute;
            top: 0;
            left: 0;
        }

        @keyframes fadeUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .highlight {
            color: var(--primary);
            font-weight: 600;
        }

        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
                gap: 2rem;
            }

            .hero-content {
                max-width: 100%;
                text-align: center;
            }

            .video-container {
                max-width: 600px;
                margin: 0 auto;
            }

            .form-group {
                flex-direction: column;
            }

            .submit-btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <canvas id="webgl-background"></canvas>
    
    <div class="content">
        <section class="hero-section">
            <div class="container">
                <div class="hero-content">
                    <h1 class="title-sequence">EVIL MODEL</h1>
                    <p class="subtitle">
                        Years of research, resulting in the development of the Evil Model, part of the <span class="highlight">EVIL AI</span> suite of tools. Powered by an <span class="highlight">AI ALGO</span> data platform, this model can plot levels where price will most likely form manipulation based on historical data analysis and real-time adjustments.
                    </p>
                    <div class="waitlist-form">
                        <div class="form-group">
                            <input type="email" class="input-field" placeholder="Enter your email address" required>
                            <button class="submit-btn">Join Waitlist</button>
                        </div>
                        <p style="font-size: 0.9rem; color: var(--text-secondary);">
                            Be the first to access when we launch
                        </p>
                    </div>
                </div>
                
                <div class="video-container">
                    <iframe 
                        src="https://player.vimeo.com/video/1050832157?autoplay=1&loop=1&background=1"
                        width="100%" 
                        height="100%" 
                        allow="autoplay; fullscreen" 
                        style="border: none;"
                        loading="lazy"
                        frameborder="0"
                    ></iframe>
                </div>
            </div>
        </section>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // WebGL Background
        const params = {
            enableWebGL: window.innerWidth > 768,
            particleCount: window.innerWidth > 1200 ? 100 : 50,
            animationSpeed: 0.001
        };

        if (params.enableWebGL) {
            const canvas = document.querySelector('#webgl-background');
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({
                canvas: canvas,
                antialias: true,
                alpha: true,
                powerPreference: "high-performance"
            });

            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

            const geometry = new THREE.PlaneGeometry(30, 30, 32, 32);
            const material = new THREE.MeshPhongMaterial({
                color: 0xE25747,
                wireframe: true,
                transparent: true,
                opacity: 0.2
            });

            const mesh = new THREE.Mesh(geometry, material);
            mesh.rotation.x = -Math.PI * 0.5;
            scene.add(mesh);

            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            const pointLight = new THREE.PointLight(0xE25747, 1.2);
            pointLight.position.set(2, 3, 4);
            scene.add(pointLight);

            const hemisphereLight = new THREE.HemisphereLight(0xE25747, 0x000000, 0.3);
            scene.add(hemisphereLight);

            camera.position.set(0, 5, 7);

            let lastTime = 0;
            const animate = (currentTime = 0) => {
                const deltaTime = currentTime - lastTime;
                lastTime = currentTime;

                if (deltaTime < 32) {
                    const positions = geometry.attributes.position.array;
                    for (let i = 0; i < positions.length; i += 3) {
                        positions[i + 2] = Math.sin((currentTime * params.animationSpeed) + positions[i]) * 0.5;
                    }
                    geometry.attributes.position.needsUpdate = true;
                    
                    renderer.render(scene, camera);
                }
                requestAnimationFrame(animate);
            };

            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                }, 250);
            });

            let mouseX = 0, mouseY = 0;
            document.addEventListener('mousemove', (event) => {
                mouseX = (event.clientX / window.innerWidth) * 2 - 1;
                mouseY = (event.clientY / window.innerHeight) * 2 - 1;
                
                mesh.rotation.x = -Math.PI * 0.5 + mouseY * 0.1;
                mesh.rotation.y = mouseX * 0.1;
            });

            animate();
        }

        // Form handling
        document.querySelector('.submit-btn').addEventListener('click', function(e) {
            e.preventDefault();
            const email = document.querySelector('.input-field').value;
            if (email && email.includes('@')) {
                this.innerHTML = 'Added to Waitlist ✓';
                this.style.background = '#4CAF50';
                document.querySelector('.input-field').value = '';
                setTimeout(() => {
                    this.innerHTML = 'Join Waitlist';
                    this.style.background = '';
                }, 3000);
            } else {
                document.querySelector('.input-field').focus();
            }
        });
    </script>
</body>
</html>
